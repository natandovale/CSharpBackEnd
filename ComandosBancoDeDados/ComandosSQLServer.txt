=>Criar Banco de Dados
	CREATE DATABASE [nomeDoBanco]

=>Excluindo Banco de dados
USE [master];

DECLARE @kill VARCHAR(8000) = '';
SELECT @kill = @kill + 'kill' + CONVERT(VARCHAR(5), session_id) + ';'
FROM sys.dm_exec_sessions 
WHERE database_id = db_id('Curso')

EXEC(@kill);

DROP DATABASE [Curso]

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

=>Criar tabelas
	USE [Curso]

	CREATE TABLE [Aluno](
    	    [Id] INT NOT NULL IDENTITY,
    	    [Nome] NVARCHAR(80),	
	    [Nascimento] DATETIME,
    	    [Active] BIT
	)

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

=>Alterando tabelas
	ALTER TABLE [Aluno] 
    		ADD [Document] NVARCHAR(11)

	ALTER TABLE [Aluno]
    		DROP COLUMN [Document]

	ALTER TABLE [Aluno]
    		ALTER COLUMN [Document] CHAR(11)

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

=>Constraint (NOT NULL)
CREATE TABLE [Aluno](
    [Id] INT NOT NULl,
    [Nome] NVARCHAR(80) NOT NULL,	
	[Nascimento] DATETIME NULL,
    [Active] BIT DEFAULT(0),
)

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

=>Primary Key
	CREATE TABLE [Aluno](
    [Id] INT NOT NULl,
    [Nome] NVARCHAR(80) NOT NULL,
    [Email] NVARCHAR(180) NOT NULL,	
	[Nascimento] DATETIME NULL,
    [Active] BIT DEFAULT(0),

    CONSTRAINT [PK_Aluno] PRIMARY KEY([Id]),
    CONSTRAINT [UQ_Aluno_Email] UNIQUE([Email]),
)
GO

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

=>Composite Key and Foreing Key
	CREATE TABLE [Curso](
    [Id] INT NOT NULl,
    [Nome] NVARCHAR(80) NOT NULL,
    [CategoriaId] INT NOT NULL,

    CONSTRAINT [PK_Curso] PRIMARY KEY([Id]),
    CONSTRAINT [FK_Curso_Categoria] FOREIGN KEY([CategoriaId]) REFERENCES [Categoria]([Id])
)
GO

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


CREATE TABLE [Categoria](
    [Id] INT NOT NULL,
    [Nome] NVARCHAR(80) NOT NULL

    CONSTRAINT [PK_Categoria] PRIMARY KEY([Id]),
)
GO

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

=>Indices
CREATE INDEX [IX_Aluno_Email] ON [Aluno]([Email])
DROP INDEX [IX_Aluno_Email] ON [Aluno]

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

=>Insert

INSERT INTO [Categoria](Nome) VALUES('Backend')
INSERT INTO [Categoria](Nome) VALUES('Frontend')
INSERT INTO [Categoria](Nome) VALUES('Mobile')

INSERT INTO [Curso]([Nome], [CategoriaId]) VALUES('Fundamentos de C#', 1)
INSERT INTO [Curso]([Nome], [CategoriaId]) VALUES('Fundamentos de OOP', 1)
INSERT INTO [Curso]([Nome], [CategoriaId]) VALUES('Angula', 2)
INSERT INTO [Curso]([Nome], [CategoriaId]) VALUES('Flutter', 3)
INSERT INTO [Curso]([Nome], [CategoriaId]) VALUES('Flutter e SQLite', 1)

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

=>Select
SELECT TOP 100 [Id], [Nome] FROM [Categoria]
SELECT TOP 100 COUNT([Id]) FROM [Categoria]
SELECT TOP 100 SUM([Id]) FROM [Categoria]
SELECT TOP 100 AVG([Id]) FROM [Categoria]
SELECT TOP 100 MAX([Id]) FROM [Categoria]
SELECT TOP 100 MIN([Id]) FROM [Categoria]

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

=>Querys
SELECT TOP 100 [Id], [Nome], [CategoriaId]
FROM [Curso]
WHERE [CategoriaId] = 1

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

=>ORDER BY
SELECT TOP 100 [Id], [Nome], [CategoriaId]
FROM [Curso]
ORDER BY [Nome] DESC

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

=>Update
BEGIN TRANSACTION
    UPDATE [Curso]
    SET [Nome] = 'Angular'
    WHERE [Id] = 3
COMMIT/ROLLBACK

=>LIKE
SELECT TOP 100 *
FROM [Curso]
WHERE [Nome] LIKE '%Busca' <- Termina com busca
		  'Busca%'<- ComeÃ§a com busca
		  '%Busca%' <- Contem busca

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

=>Juntando tabelas com JOIN
SELECT TOP 100 * 
FROM [Curso]
INNER JOIN [Categoria]
ON [Curso].[CategoriaId] = [Categoria].[Id]
------------
SELECT TOP 100 [Curso].[Id],
               [Curso].[Nome],
               [Curso].[CategoriaId],
               [Categoria].[Nome]
FROM [Curso]
INNER JOIN [Categoria]
ON [Curso].[CategoriaId] = [Categoria].[Id]

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>.

=>Group By
SELECT TOP 100 [Categoria].[Id],
               [Categoria].[Nome],
               COUNT([Curso].[CategoriaId]) AS [Cursos]
FROM [Categoria]
INNER JOIN [Curso]
ON [Curso].[CategoriaId] = [Categoria].[Id]
GROUP BY
    [Categoria].[Id],
    [Categoria].Nome,
    [Curso].[CategoriaId]
HAVING
    COUNT([Curso].[CategoriaId]) > 2

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

=>VIEWS
CREATE OR ALTER vwContagemCursosPorCategoria AS
    SELECT TOP 100 [Categoria].[Id],
               [Categoria].[Nome],
               COUNT([Curso].[CategoriaId]) AS [Cursos]
    FROM [Categoria]
    INNER JOIN [Curso]
    ON [Curso].[CategoriaId] = [Categoria].[Id]
    GROUP BY
        [Categoria].[Id],
        [Categoria].Nome,
        [Curso].[CategoriaId]
    HAVING
    COUNT([Curso].[CategoriaId]) > 2

SELECT * FROM vwContagemCursosPorCategoria

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

=>STORE PROCEDURES
	CREATE OR ALTER PROCEDURE [spListCourse] AS 
	SELECT * FROM [Course]

EXEC [spListCourse]





















